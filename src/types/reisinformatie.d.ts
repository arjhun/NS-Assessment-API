/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v2/departures": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Departures
         * @description List of departures for a specific station
         */
        get: operations["getDepartures"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/arrivals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Arrivals
         * @description List of arrivals for a specific station
         */
        get: operations["getArrivals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/journey": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Journey details
         * @description Returns information about a specific journey
         */
        get: operations["getJourneyDetail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/trips/trip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Single trip
         * @description Returns a single trip, based on the given parameters
         */
        get: operations["getTrip"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/calamities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Calamities
         * @description List of calamities. This operation is deprecated. Use /api/v3/disruptions instead
         */
        get: operations["getCalamities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/price": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Domestic prices
         * @description Returns price information for domestic trips
         */
        get: operations["getPrices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/stations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Stations
         * @description List of stations. This operation is deprecated. Use https://gateway.apiportal.ns.nl/nsapp-stations/v2 or v3 instead
         */
        get: operations["getStations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/trips": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Trips
         * @description Returns a travel advice for the given parameters
         */
        get: operations["getTravelAdvice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/disruptions/station/{stationCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Station disruptions
         * @description List of disruptions relevant for the current station. This operation is deprecated. Use https://gateway.apiportal.ns.nl/disruptions/v3/station/{stationCode} instead
         */
        get: operations["getStationDisruptions_v3"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/disruptions/{type}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Single disruption
         * @description Returns information on a single disruption/maintenance/calamity. This operation is deprecated. Use https://gateway.apiportal.ns.nl/disruptions/v3/{type}/{id} instead
         */
        get: operations["getDisruption_v3"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/disruptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Disruptions
         * @description List of calamities/disruptions/maintenance. This operation is deprecated. Use https://gateway.apiportal.ns.nl/disruptions/v3 instead
         */
        get: operations["getDisruptions_v3"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/price": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Domestic prices
         * @description Returns price information for domestic trips
         */
        get: operations["getPrices_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/stations/nearest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get stations closest to provided coordinates
         * @description Get stations closest to provided coordinates. This operation is deprecated. Use https://gateway.apiportal.ns.nl/nsapp-stations/v2/nearest or v3/nearest instead
         */
        get: operations["getNearestStations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/openapi": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * OpenAPI Spec
         * @description Show the OpenAPI spec JSON docs
         */
        get: operations["getOpenAPISpecs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v3/trips/booked-trip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Booked trip
         * @description Returns a booked trip
         */
        get: operations["getTrip_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Coordinate: {
            lat: number;
            lng: number;
        };
        Duration: {
            value: string;
            accessibilityValue: string;
            nesProperties: components["schemas"]["NesProperties"];
        };
        Eco: {
            /** Format: double */
            co2kg: number;
        };
        EticketNotBuyableReason: {
            /** @enum {string} */
            reason: "UNKNOWN_PRICE" | "TOO_MANY_SEPARATE_PARTS" | "TOO_FAR_IN_PAST" | "TOO_FAR_IN_FUTURE" | "STATION_NOT_OPEN_YET" | "TRIP_IS_NOT_DOMESTIC" | "VIA_STATION_REQUESTED" | "NO_TRAIN_LEGS_IN_TRIP";
            description?: string;
        };
        FareLeg: {
            origin: components["schemas"]["TripOriginDestination"];
            destination: components["schemas"]["TripOriginDestination"];
            operator?: string;
            productTypes: ("TRAIN" | "BUS" | "TRAM" | "METRO" | "FERRY" | "WALK" | "BIKE" | "CAR" | "TAXI" | "SHARED_MODALITY" | "UNKNOWN")[];
            fares: components["schemas"]["TripTravelFare"][];
        };
        FareLegStop: {
            /** Format: int32 */
            varCode: number;
            name?: string;
        };
        FareRoute: {
            routeId?: string;
            origin: components["schemas"]["FareLegStop"];
            destination: components["schemas"]["FareLegStop"];
        };
        JourneyDetailLink: {
            /** @enum {string} */
            type: "BTM" | "TRAIN_XML";
            link: components["schemas"]["Link"];
        };
        JourneyRegistrationParameters: {
            /** Format: uri */
            url?: string;
            /** Format: uri */
            searchUrl: string;
            /** @enum {string} */
            status: "REGISTRATION_POSSIBLE" | "NOT_AVAILABLE" | "DATE_IN_PAST" | "DATE_TOO_FAR_FUTURE" | "NOT_NECESSARY_OTHER_OPERATOR" | "UNKNOWN";
            bicycleReservationRequired: boolean;
            availability?: components["schemas"]["RegistrationAvailability"];
        };
        LabelListItem: {
            label: string;
            stickerType: string;
            /** @enum {string} */
            salesOptionType?: "NS_DEAL_DISCOUNT";
        };
        Leg: {
            idx?: string;
            name?: string;
            /** @enum {string} */
            travelType?: "PUBLIC_TRANSIT" | "WALK" | "TRANSFER" | "BIKE" | "CAR" | "KISS" | "TAXI" | "UNKNOWN";
            direction?: string;
            partCancelled: boolean;
            cancelled: boolean;
            isOnOrAfterCancelledLeg: boolean;
            changePossible: boolean;
            alternativeTransport: boolean;
            journeyDetailRef?: string;
            origin: components["schemas"]["TripOriginDestination"];
            destination: components["schemas"]["TripOriginDestination"];
            product?: components["schemas"]["ProductInterface"];
            sharedModality?: components["schemas"]["SharedModality"];
            notes?: components["schemas"]["Note"][];
            messages?: components["schemas"]["Message"][];
            transferMessages?: components["schemas"]["TransferMessage"][];
            stops: components["schemas"]["Stop"][];
            steps?: components["schemas"]["Step"][];
            coordinates?: number[][];
            /** @enum {string} */
            crowdForecast?: "UNKNOWN" | "LOW" | "MEDIUM" | "HIGH";
            /** Format: int32 */
            bicycleSpotCount?: number;
            /** Format: double */
            punctuality?: number;
            crossPlatformTransfer?: boolean;
            shorterStock?: boolean;
            changeCouldBePossible?: boolean;
            shorterStockWarning?: string;
            /** @enum {string} */
            shorterStockClassification?: "BUSY" | "EXTRA_BUSY";
            journeyDetail?: components["schemas"]["JourneyDetailLink"][];
            reachable: boolean;
            /** Format: int64 */
            plannedDurationInMinutes?: number;
            travelAssistanceDeparture?: components["schemas"]["ServiceBookingInfo"];
            travelAssistanceArrival?: components["schemas"]["ServiceBookingInfo"];
            overviewPolyLine?: components["schemas"]["Coordinate"][];
            nesProperties?: components["schemas"]["NesProperties"];
            duration?: components["schemas"]["Duration"];
            preSteps: components["schemas"]["Step"][];
            postSteps: components["schemas"]["Step"][];
            /** Format: int64 */
            transferTimeToNextLeg?: number;
        };
        Link: {
            uri: string;
        };
        MeetingPointDetails: {
            name: string;
            /** Format: int32 */
            minutesBefore: number;
        };
        Message: {
            id?: string;
            externalId?: string;
            head?: string;
            text?: string;
            lead?: string;
            /** Format: int32 */
            routeIdxFrom?: number;
            /** Format: int32 */
            routeIdxTo?: number;
            /** @enum {string} */
            type?: "MAINTENANCE" | "DISRUPTION" | "SHORTENED";
            nesProperties?: components["schemas"]["NesProperties"];
            startDate?: string;
            endDate?: string;
            startTime?: string;
            endTime?: string;
            /** @enum {string} */
            phase?: "PHASE_1A" | "PHASE_1B" | "PHASE_2" | "PHASE_3" | "PHASE_4" | "PHASE_5";
        };
        ModalityListItem: {
            name: string;
            nameNesProperties: components["schemas"]["NesProperties"];
            iconNesProperties?: components["schemas"]["NesProperties"];
            actualTrack?: string;
            accessibilityName: string;
        };
        NesIcon: {
            color: string;
            icon: string;
            backgroundColor?: string;
        };
        NesLine: {
            color: string;
            styles?: components["schemas"]["NesLineStyles"];
        };
        NesLineStyles: {
            dashed: boolean;
        };
        NesProperties: {
            color: string;
            type?: string;
            icon?: string;
            /** @enum {string} */
            scope?: "LEG_LINE" | "ENTIRE_LEG";
            styles?: components["schemas"]["Styles"];
        };
        NesText: {
            color: string;
            text: string;
            accessibilityText: string;
            backgroundColor?: string;
            styles?: components["schemas"]["NesTextStyles"];
        };
        NesTextStyles: {
            strikethrough: boolean;
            bold: boolean;
        };
        /** @description notes is a List of Lists because this allows frontend clients to render the elements of every nested List on the same row */
        Note: {
            value?: string;
            shortValue?: string;
            accessibilityValue?: string;
            key?: string;
            /** @enum {string} */
            noteType?: "UNKNOWN" | "ATTRIBUTE" | "INFOTEXT" | "REALTIME" | "TICKET" | "HINT";
            /** Format: int32 */
            priority?: number;
            /** Format: int32 */
            routeIdxFrom?: number;
            /** Format: int32 */
            routeIdxTo?: number;
            link?: components["schemas"]["Link"];
            isPresentationRequired: boolean;
            /** @enum {string} */
            category?: "PLATFORM_INFORMATION" | "OVERCHECK_INSTRUCTION" | "UNKNOWN";
            nesProperties?: components["schemas"]["NesProperties"];
        };
        NsiLink: {
            /** @description NSI journeyplanner url with pre-filled locations and time */
            url: string;
            /** @description Whether to display an NS International banner */
            showInternationalBanner: boolean;
        };
        /** @description Most important message to display */
        PrimaryMessage: {
            title: string;
            nesProperties: components["schemas"]["NesProperties"];
            message?: components["schemas"]["Message"];
            /** @enum {string} */
            type: "TRIP_CANCELLED" | "LEG_CANCELLED" | "LEG_TRANSFER_IMPOSSIBLE" | "ALTERNATIVE_TRANSPORT" | "DISRUPTION" | "MAINTENANCE" | "REPLACEMENT" | "ADDITIONAL" | "SHORTENED_TRAIN";
        };
        Product: {
            productType: "Product";
        } & (Omit<WithRequired<components["schemas"]["ProductInterface"], "nameNesProperties" | "notes" | "type">, "productType"> & {
            /** @description notes is a List of Lists because this allows frontend clients to render the elements of every nested List on the same row */
            notes: components["schemas"]["Note"][][];
            nesProperties?: components["schemas"]["NesProperties"];
        });
        ProductInterface: {
            number?: string;
            displayName?: string;
            operatorCode?: string;
            notes: components["schemas"]["Note"][][];
            operatorName?: string;
            nameNesProperties: components["schemas"]["NesProperties"];
            iconNesProperties?: components["schemas"]["NesProperties"];
            categoryCode?: string;
            longCategoryName?: string;
            shortCategoryName?: string;
            /** Format: int32 */
            operatorAdministrativeCode?: number;
            /** @enum {string} */
            type: "TRAIN" | "BUS" | "TRAM" | "METRO" | "FERRY" | "WALK" | "BIKE" | "CAR" | "TAXI" | "SHARED_MODALITY" | "UNKNOWN";
            productType: string;
        };
        RegistrationAvailability: {
            seats: boolean;
            /** Format: int32 */
            numberOfSeats?: number;
            bicycle: boolean;
            /** Format: int32 */
            numberOfBicyclePlaces?: number;
        };
        SalesOption: {
            /** @enum {string} */
            type: "NS_DEAL_DISCOUNT";
            /** Format: int32 */
            permilleFullTariff?: number;
            /** Format: int32 */
            priceInCents?: number;
            /** Format: int32 */
            originalPrice?: number;
            betterOption: boolean;
            recommendationText?: string;
            labelText?: string;
        };
        ServiceBookingInfo: {
            name: string;
            tripLegIndex: string;
            stationUic?: string;
            serviceTypeIds: string[];
            defaultAssistanceValue: boolean;
            canChangeAssistance: boolean;
            message?: string;
        };
        SharedModality: {
            provider: string;
            name?: string;
            availability: boolean;
            /** @enum {string} */
            nearByMeMapping: "OV_FIETS" | "SHARED_ELECTRICAL_BIKE" | "SHARED_BIKE" | "SHARED_SCOOTER" | "SHARED_CAR" | "UNKNOWN";
            planIcon?: string;
        };
        Step: {
            text: components["schemas"]["NesText"];
            duration?: components["schemas"]["NesText"];
            icon?: components["schemas"]["NesIcon"];
            line: components["schemas"]["NesLine"];
        };
        Stop: {
            uicCode?: string;
            name?: string;
            lat?: number;
            lng?: number;
            countryCode?: string;
            notes: components["schemas"]["StopNote"][];
            /** Format: int32 */
            routeIdx?: number;
            departurePrognosisType?: string;
            /** Format: date-time */
            plannedDepartureDateTime?: string;
            /** Format: int32 */
            plannedDepartureTimeZoneOffset?: number;
            /** Format: date-time */
            actualDepartureDateTime?: string;
            /** Format: int32 */
            actualDepartureTimeZoneOffset?: number;
            /** Format: date-time */
            plannedArrivalDateTime?: string;
            /** Format: int32 */
            plannedArrivalTimeZoneOffset?: number;
            /** Format: date-time */
            actualArrivalDateTime?: string;
            /** Format: int32 */
            actualArrivalTimeZoneOffset?: number;
            /** Format: date-time */
            plannedPassingDateTime?: string;
            /** Format: date-time */
            actualPassingDateTime?: string;
            arrivalPrognosisType?: string;
            actualDepartureTrack?: string;
            plannedDepartureTrack?: string;
            plannedArrivalTrack?: string;
            actualArrivalTrack?: string;
            /** Format: int64 */
            departureDelayInSeconds?: number;
            /** Format: int64 */
            arrivalDelayInSeconds?: number;
            cancelled: boolean;
            borderStop: boolean;
            passing: boolean;
            quayCode?: string;
        };
        StopNote: {
            value: string;
            key?: string;
            /** @enum {string} */
            type: "U" | "A" | "I" | "R" | "H";
            /** Format: int32 */
            priority?: number;
        };
        Styles: {
            type: string;
        };
        TransferMessage: {
            message: string;
            accessibilityMessage: string;
            /** @enum {string} */
            type: "IMPOSSIBLE_TRANSFER" | "SPECIAL" | "CHECKOVER_INSTRUCTION" | "CROSS_PLATFORM" | "TRANSFER_TIME";
            messageNesProperties: components["schemas"]["NesProperties"];
            iconNesProperties?: components["schemas"]["NesProperties"];
        };
        TravelAdvice: {
            /**
             * @description Source system that has generated these travel advices
             * @enum {string}
             */
            source: "HARP" | "NEGENTWEE" | "GOOGLE" | "PAS";
            /** @description List of trips */
            trips: components["schemas"]["Trip"][];
            travelAdviceMessage?: components["schemas"]["TravelAdviceMessage"];
            /** @description Scroll context to use when scrolling back in time. Can be used in scrollContext query parameter */
            scrollRequestBackwardContext?: string;
            /** @description Scroll context to use when scrolling forward in time. Can be used in scrollContext query parameter */
            scrollRequestForwardContext?: string;
            /** @description Optional message indicating why the list of trips is empty. */
            message?: string;
        };
        /** @description Possible Message about maintenance in origin and destination station */
        TravelAdviceMessage: {
            title: string;
            nesProperties: components["schemas"]["NesProperties"];
            disruptionIds: string[];
        };
        TravelAssistanceInfo: {
            /** Format: url */
            termsAndConditionsLink?: string;
            /** Format: int32 */
            tripRequestId: number;
            isAssistanceRequired: boolean;
        };
        Trip: {
            /** @description Unique identifier for this trip */
            uid: string;
            /** @description Reconstruction context for this trip. Can be used to reconstruct this exact trip with the v3/trips/trip endpoint */
            ctxRecon: string;
            /** @description Reconstruction context for this trip set by the travel advice source system. Can be used to interact follow-up requests with the source system, like booking a trip with travel assistance (NSRA). Can be null if the source doesn't provide a ctxRecon */
            sourceCtxRecon?: string;
            /**
             * Format: int64
             * @description Planned duration of this trip in minutes
             */
            plannedDurationInMinutes?: number;
            /**
             * Format: int64
             * @description Actual duration of this trip in minutes, or the planned duration if no realtime information about this trip is available.
             */
            actualDurationInMinutes?: number;
            /**
             * Format: int32
             * @description Number of public transit transfers
             */
            transfers: number;
            /**
             * @description Status of this trip
             * @enum {string}
             */
            status: "CANCELLED" | "CHANGE_NOT_POSSIBLE" | "ALTERNATIVE_TRANSPORT" | "DISRUPTION" | "MAINTENANCE" | "UNCERTAIN" | "REPLACEMENT" | "ADDITIONAL" | "SPECIAL" | "NORMAL";
            primaryMessage?: components["schemas"]["PrimaryMessage"];
            /** @description List of messages regarding maintenance or disruption that influences this trip. */
            messages?: components["schemas"]["Message"][];
            legs: components["schemas"]["Leg"][];
            overviewPolyLine?: components["schemas"]["Coordinate"][];
            /** @enum {string} */
            crowdForecast?: "UNKNOWN" | "LOW" | "MEDIUM" | "HIGH";
            /** Format: double */
            punctuality?: number;
            /** @description Whether or not this trip is regarded the best possible option of all returned trips */
            optimal: boolean;
            fareRoute?: components["schemas"]["FareRoute"];
            fares?: components["schemas"]["TripSalesFare"][];
            fareLegs?: components["schemas"]["FareLeg"][];
            productFare?: components["schemas"]["TripTravelFare"];
            fareOptions?: components["schemas"]["TripFareOptions"];
            bookingUrl?: components["schemas"]["Link"];
            nsiLink?: components["schemas"]["NsiLink"];
            /** @enum {string} */
            type: "NS" | "NS_ACCESSIBLE" | "NEGENTWEE" | "GOOGLE" | "PAS";
            shareUrl?: components["schemas"]["Link"];
            realtime: boolean;
            travelAssistanceInfo?: components["schemas"]["TravelAssistanceInfo"];
            routeId?: string;
            registerJourney?: components["schemas"]["JourneyRegistrationParameters"];
            eco?: components["schemas"]["Eco"];
            modalityListItems?: components["schemas"]["ModalityListItem"][];
            labelListItems?: components["schemas"]["LabelListItem"][];
        };
        TripFareOptions: {
            isInternationalBookable: boolean;
            isInternational: boolean;
            isEticketBuyable: boolean;
            isPossibleWithOvChipkaart: boolean;
            isTotalPriceUnknown: boolean;
            supplementsBasedOnSelectedFare?: components["schemas"]["TripFareSupplement"][];
            reasonEticketNotBuyable?: components["schemas"]["EticketNotBuyableReason"];
            salesOptions?: components["schemas"]["SalesOption"][];
        };
        TripFareSupplement: {
            /** Format: int32 */
            supplementPriceInCents: number;
            fromUICCode?: string;
            toUICCode?: string;
            link?: components["schemas"]["Link"];
        };
        TripOriginDestination: {
            name?: string;
            lng?: number;
            lat?: number;
            city?: string;
            countryCode?: string;
            uicCode?: string;
            stationCode?: string;
            /** @enum {string} */
            type?: "STATION" | "ADDRESS" | "POINT_OF_INTEREST";
            prognosisType?: string;
            /** Format: int32 */
            plannedTimeZoneOffset?: number;
            /** Format: date-time */
            plannedDateTime?: string;
            /** Format: int32 */
            actualTimeZoneOffset?: number;
            /** Format: date-time */
            actualDateTime?: string;
            plannedTrack?: string;
            actualTrack?: string;
            /** @enum {string} */
            exitSide?: "LEFT" | "RIGHT" | "UNKNOWN";
            /** @enum {string} */
            checkinStatus?: "CHECKIN" | "CHECKOUT" | "OVERCHECK" | "DETOUR" | "REQUIRED_CHECK_OUT_IN" | "NOTHING";
            travelAssistanceBookingInfo?: components["schemas"]["ServiceBookingInfo"];
            travelAssistanceMeetingPoints?: string[];
            travelAssistanceMeetingPointDetails?: components["schemas"]["MeetingPointDetails"][];
            notes?: components["schemas"]["Note"][];
            quayCode?: string;
        };
        TripSalesFare: {
            /** Format: int32 */
            priceInCents?: number;
            /** @enum {string} */
            product?: "OVCHIPKAART_ENKELE_REIS" | "OVCHIPKAART_RETOUR" | "TRAJECT_VRIJ_JAAR" | "BUSINESS_CARD_TRAJECT_VRIJ_JAAR" | "ETICKET_ENKELE_REIS" | "ETICKET_RETOUR" | "NS_DEAL_DISCOUNT_ENKELE_REIS" | "RAILRUNNER" | "ICE_SUPPLEMENT" | "ICD_SUPPLEMENT" | "NSI";
            /** @enum {string} */
            travelClass?: "FIRST_CLASS" | "SECOND_CLASS";
            /** Format: int32 */
            priceInCentsExcludingSupplement?: number;
            /** @enum {string} */
            discountType?: "NO_DISCOUNT" | "DISCOUNT_20_PERCENT" | "DISCOUNT_40_PERCENT" | "NO_CHARGE" | "OTHER";
            /** Format: int32 */
            supplementInCents?: number;
            link?: string;
        };
        TripTravelFare: {
            /** Format: int32 */
            priceInCents?: number;
            /** Format: int32 */
            priceInCentsExcludingSupplement?: number;
            /** Format: int32 */
            supplementInCents?: number;
            /** Format: int32 */
            buyableTicketPriceInCents?: number;
            /** Format: int32 */
            buyableTicketPriceInCentsExcludingSupplement?: number;
            /** Format: int32 */
            buyableTicketSupplementPriceInCents?: number;
            /** @enum {string} */
            product?: "GEEN" | "OVCHIPKAART_ENKELE_REIS" | "OVCHIPKAART_RETOUR" | "DAL_VOORDEEL" | "ALTIJD_VOORDEEL" | "DAL_VRIJ" | "WEEKEND_VRIJ" | "ALTIJD_VRIJ" | "BUSINESSCARD" | "BUSINESSCARD_DAL" | "STUDENT_WEEK" | "STUDENT_WEEKEND" | "VDU" | "SAMENREISKORTING" | "TRAJECT_VRIJ";
            /** @enum {string} */
            travelClass?: "FIRST_CLASS" | "SECOND_CLASS";
            /** @enum {string} */
            discountType: "NO_DISCOUNT" | "DISCOUNT_20_PERCENT" | "DISCOUNT_40_PERCENT" | "NO_CHARGE" | "OTHER";
            link?: string;
        };
        APIError: {
            /** Format: date-time */
            timestamp: string;
            /** Format: int32 */
            code: number;
            message: string;
            path: string;
            exception?: string;
            errors?: components["schemas"]["LocalizedErrorDetail"][];
            requestId: string;
        };
        LocalizedErrorDetail: {
            message: string;
            arguments: Record<string, never>[];
            type: string;
            lang: string;
        };
        PriceV3: {
            /**
             * Format: int32
             * @description Total price
             */
            totalPriceInCents: number;
            /**
             * Format: int32
             * @description Price per adult
             */
            pricePerAdultInCents: number;
            /**
             * Format: int32
             * @description Discount price compared to total price without any discount
             */
            discountInCents?: number;
            /** @description Name of the operator */
            operatorName?: string;
            /**
             * @description Type of discount
             * @enum {string}
             */
            discountType: "NONE" | "EARLY_BOOKING" | "GROUP" | "JOINT_JOURNEY" | "RAILRUNNER" | "NS_DEAL";
            /**
             * @description Traveling class
             * @enum {string}
             */
            travelClass: "FIRST_CLASS" | "SECOND_CLASS";
            /** @description Travel products types */
            travelProducts: components["schemas"]["Unit"][];
            /** @description Denotes if the user can select this option */
            isSelectable: boolean;
            /** @description Display name of product */
            displayName: string;
            /** @description Header of conditions */
            conditionsHeader: string;
            /** @description Conditions of product */
            conditionsText?: string;
            /** @description Url to webpage with common conditions */
            conditionsUrl?: string;
            /** @description Product ID used to buy ticket */
            productId: string;
            /** @description Indicates if this price is the best option for client */
            isBestOption: boolean;
            /**
             * Format: int32
             * @description Price per child
             */
            pricePerChildInCents: number;
        };
        PricesResponseV3: {
            prices: components["schemas"]["PriceV3"][];
        };
        RepresentationResponsePricesResponseV3: {
            payload: components["schemas"]["PricesResponseV3"];
            links?: {
                [key: string]: components["schemas"]["Link"];
            };
            meta?: {
                [key: string]: Record<string, never>;
            };
        };
        /** @description Travel products types */
        Unit: Record<string, never>;
        BaseDisruption: {
            id: string;
            /** @enum {string} */
            type: "CALAMITY" | "DISRUPTION" | "MAINTENANCE";
            isActive: boolean;
            title: string;
            topic?: string;
        };
        NearbyMeLocationId: {
            value: string;
            type: string;
        };
        Station: {
            UICCode: string;
            stationType: string;
            EVACode?: string;
            code?: string;
            /** Format: int32 */
            cdCode?: number;
            sporen: components["schemas"]["Track"][];
            synoniemen: string[];
            heeftFaciliteiten: boolean;
            heeftVertrektijden: boolean;
            heeftReisassistentie: boolean;
            namen?: components["schemas"]["StationsNamen"];
            land?: string;
            lat?: number;
            lng?: number;
            /** Format: int32 */
            radius?: number;
            /** Format: int32 */
            naderenRadius?: number;
            /** Format: double */
            distance?: number;
            /** Format: date */
            ingangsDatum?: string;
            /** Format: date */
            eindDatum?: string;
            nearbyMeLocationId?: components["schemas"]["NearbyMeLocationId"];
        };
        StationResponse: {
            payload: components["schemas"]["Station"][];
            links?: {
                [key: string]: string;
            };
            meta?: {
                [key: string]: string;
            };
        };
        StationsNamen: {
            lang: string;
            middel: string;
            kort: string;
            festive?: string;
        };
        Track: {
            spoorNummer: string;
        };
        Price: {
            /** Format: int32 */
            totalPriceInCents: number;
            /** Format: int32 */
            priceDifferenceInCentsBetweenFirstAndSecondClass?: number;
            /** Format: int32 */
            priceDifferenceInCentsBetweenJointJourneyDiscount?: number;
            operatorName?: string;
            /** @enum {string} */
            travelDiscount: "NO_DISCOUNT" | "DISCOUNT_20" | "DISCOUNT_40" | "NO_CHARGE";
            /** @enum {string} */
            travelClass: "FIRST_CLASS" | "SECOND_CLASS";
            travelProducts: ("OVCHIPKAART_ENKELE_REIS" | "OVCHIPKAART_RETOUR" | "TRAJECT_VRIJ_JAAR" | "BUSINESS_CARD_TRAJECT_VRIJ_JAAR" | "RAILRUNNER" | "ETICKET_ENKELE_REIS" | "ETICKET_RETOUR")[];
        };
        RepresentationResponsePrice: {
            payload: components["schemas"]["Price"];
            links?: {
                [key: string]: components["schemas"]["Link"];
            };
            meta?: {
                [key: string]: Record<string, never>;
            };
        };
        ArrivalOrDeparture: {
            product: components["schemas"]["Product"];
            origin?: components["schemas"]["Station"];
            destination?: components["schemas"]["Station"];
            /** Format: date-time */
            plannedTime?: string;
            /** Format: date-time */
            actualTime?: string;
            /** Format: int64 */
            delayInSeconds?: number;
            plannedTrack?: string;
            actualTrack?: string;
            cancelled: boolean;
            /** Format: double */
            punctuality?: number;
            /** @enum {string} */
            crowdForecast: "UNKNOWN" | "LOW" | "MEDIUM" | "HIGH";
            /** @enum {string} */
            shorterStockClassification?: "BUSY" | "EXTRA_BUSY";
            stockIdentifiers?: string[];
        };
        CoachCrowdForecast: {
            /** Format: int32 */
            paddingLeft: number;
            /** Format: int32 */
            width: number;
            /** @enum {string} */
            classification: "UNKNOWN" | "LOW" | "MEDIUM" | "HIGH";
        };
        Journey: {
            notes: components["schemas"]["Note"][];
            productNumbers: string[];
            stops: components["schemas"]["JourneyStop"][];
            allowCrowdReporting: boolean;
            source: string;
        };
        JourneyStop: {
            id: string;
            stop: components["schemas"]["Station"];
            previousStopId: string[];
            nextStopId: string[];
            destination?: string;
            /** @enum {string} */
            status?: "ORIGIN" | "SPLIT" | "STOP" | "PASSING" | "COMBINE" | "DESTINATION" | "STOP_CHANGED_ORIGIN" | "STOP_CHANGED_DESTINATION";
            /** @enum {string} */
            kind?: "DEPARTURE" | "ARRIVAL" | "TRANSFER";
            arrivals: components["schemas"]["ArrivalOrDeparture"][];
            departures: components["schemas"]["ArrivalOrDeparture"][];
            actualStock?: components["schemas"]["Stock"];
            plannedStock?: components["schemas"]["Stock"];
            platformFeatures?: components["schemas"]["PlatformFeature"][];
            coachCrowdForecast?: components["schemas"]["CoachCrowdForecast"][];
        };
        Part: {
            stockIdentifier?: string;
            destination?: components["schemas"]["Station"];
            facilities: string[];
            image?: components["schemas"]["StockPartLink"];
        };
        PlatformFeature: {
            /** Format: int32 */
            paddingLeft: number;
            /** Format: int32 */
            width: number;
            type: string;
            description: string;
        };
        RepresentationResponseJourney: {
            payload: components["schemas"]["Journey"];
            links?: {
                [key: string]: components["schemas"]["Link"];
            };
            meta?: {
                [key: string]: Record<string, never>;
            };
        };
        Stock: {
            trainType?: string;
            /** Format: int32 */
            numberOfSeats: number;
            /** Format: int32 */
            numberOfParts: number;
            trainParts: components["schemas"]["Part"][];
            hasSignificantChange: boolean;
        };
        StockPartLink: {
            uri: string;
        };
        Departure: {
            direction?: string;
            name: string;
            /** Format: date-time */
            plannedDateTime?: string;
            /** Format: int32 */
            plannedTimeZoneOffset?: number;
            /** Format: date-time */
            actualDateTime?: string;
            /** Format: int32 */
            actualTimeZoneOffset?: number;
            plannedTrack?: string;
            actualTrack?: string;
            product: components["schemas"]["Product"];
            trainCategory: string;
            cancelled: boolean;
            journeyDetailRef?: string;
            routeStations: components["schemas"]["RouteStation"][];
            messages: components["schemas"]["Message"][];
            /** @enum {string} */
            departureStatus: "ON_STATION" | "INCOMING" | "DEPARTED" | "UNKNOWN";
        };
        DeparturesPayload: {
            source: string;
            departures: components["schemas"]["Departure"][];
        };
        RepresentationResponseDeparturesPayload: {
            payload: components["schemas"]["DeparturesPayload"];
            links?: {
                [key: string]: components["schemas"]["Link"];
            };
            meta?: {
                [key: string]: Record<string, never>;
            };
        };
        RouteStation: {
            uicCode?: string;
            mediumName?: string;
        };
        Arrival: {
            origin?: string;
            name: string;
            /** Format: date-time */
            plannedDateTime?: string;
            /** Format: int32 */
            plannedTimeZoneOffset?: number;
            /** Format: date-time */
            actualDateTime?: string;
            /** Format: int32 */
            actualTimeZoneOffset?: number;
            plannedTrack?: string;
            actualTrack?: string;
            product: components["schemas"]["Product"];
            trainCategory: string;
            cancelled: boolean;
            journeyDetailRef?: string;
            messages: components["schemas"]["Message"][];
            /** @enum {string} */
            arrivalStatus: "ON_STATION" | "INCOMING" | "DEPARTED" | "UNKNOWN";
        };
        ArrivalsPayload: {
            source: string;
            arrivals: components["schemas"]["Arrival"][];
        };
        RepresentationResponseArrivalsPayload: {
            payload: components["schemas"]["ArrivalsPayload"];
            links?: {
                [key: string]: components["schemas"]["Link"];
            };
            meta?: {
                [key: string]: Record<string, never>;
            };
        };
        CalamitiesResourceCalamity: {
            id?: string;
            titel?: string;
            beschrijving?: string;
            /** Format: int64 */
            lastModified?: number;
            /** @enum {string} */
            type?: "informatie" | "waarschuwing";
            url?: string;
            /** @enum {string} */
            buttonPositie?: "boven" | "onder" | "beide";
            /** Format: int64 */
            laatstGewijzigd?: number;
            /** Format: int64 */
            volgendeUpdate?: number;
            calltoactionbuttons?: components["schemas"]["CallToActionButton"][];
            bodyitems?: components["schemas"]["CalamityBodyItem"][];
        };
        CalamitiesResponse: {
            calamiteit?: components["schemas"]["CalamitiesResourceCalamity"];
            meldingen?: components["schemas"]["CalamitiesResourceCalamity"][];
        };
        CalamityBodyItem: {
            objectType: string;
            content?: string;
            titel?: string;
            downloads?: components["schemas"]["Download"][];
            links?: components["schemas"]["Link"][];
        };
        CallToActionButton: {
            callToAction?: string;
            url?: string;
            /** @enum {string} */
            type?: "button--primary" | "button--secondary" | "button--buy" | "button--print";
            voorleestitel?: string;
        };
        Download: {
            titel?: string;
            bestand?: components["schemas"]["DownloadFile"];
        };
        DownloadFile: {
            url?: string;
            /** Format: int64 */
            length?: number;
            mimeType?: string;
            /** Format: int64 */
            lastModified?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getDepartures: {
        parameters: {
            query?: {
                /** @description Language to use for localizing the departures list. Only a small subset of text is translated, mainly notes. Defaults to Dutch */
                lang?: string;
                /**
                 * @description NS Station code for the station to return departures for. Can be left empty if uicCode parameter is provided.
                 * @example ut
                 */
                station?: string;
                /**
                 * @description UIC code for the station to return departures for. Can be left empty if station parameter is provided.
                 * @example 8400621
                 */
                uicCode?: string;
                /** @description Format - date-time (as date-time in RFC3339). Departure date to show departures from. Only supported for departures at foreign stations. Defaults to server time (Europe/Amsterdam) */
                dateTime?: string;
                /** @description Number of departures or departures to return. Defaults to 40 */
                maxJourneys?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of departures */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RepresentationResponseDeparturesPayload"];
                };
            };
            /** @description Bad request. One or more parameters are invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
            /** @description Station name or uiccode provided in the parameters could not be found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
        };
    };
    getArrivals: {
        parameters: {
            query?: {
                /** @description Language to use for localizing the arrivals list. Only a small subset of text is translated, mainly notes. Defaults to Dutch */
                lang?: string;
                /**
                 * @description NS Station code for the station to return arrivals for. Can be left empty if uicCode parameter is provided.
                 * @example ut
                 */
                station?: string;
                /**
                 * @description UIC code for the station to return arrivals for. Can be left empty if station parameter is provided.
                 * @example 8400621
                 */
                uicCode?: string;
                /** @description Format - date-time (as date-time in RFC3339). Departure date to show arrivals from.  Only supported for arrivals at foreign stations. Defaults to server time (Europe/Amsterdam) */
                dateTime?: string;
                /** @description Number of departures or arrivals to return. Defaults to 40 */
                maxJourneys?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of arrivals */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RepresentationResponseArrivalsPayload"];
                };
            };
            /** @description Bad request. One or more parameters are invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
            /** @description Station name or uiccode provided in the parameters could not be found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
        };
    };
    getJourneyDetail: {
        parameters: {
            query?: {
                /**
                 * @description Format - int32. Train number to return details for. Either the train number or journey identifier must be given
                 * @example 6952
                 */
                train?: number;
                /**
                 * @description Journey identifier. Can be found in as journeyDetailRef in the /api/v3/trips output. Either the train number of journey identifier must be given
                 * @example 1|231691|0|784|15122020
                 */
                id?: string;
                /** @description Format - date-time (as date-time in RFC3339). Date for this journey. Defaults to server time (Europe/Amsterdam) */
                dateTime?: string;
                /**
                 * @description UIC code of the station that will be indicated as kind = DEPARTURE in the output.
                 * @example 8400335
                 */
                departureUicCode?: string;
                /**
                 * @description UIC code of the station that will be indicated as kind = TRANSFER in the output.
                 * @example 8400621
                 */
                transferUicCode?: string;
                /**
                 * @description UIC code of the station that will be indicated as kind = ARRIVAL in the output.
                 * @example 8400263
                 */
                arrivalUicCode?: string;
                /**
                 * @description Omit crowd forecast data for stations in the journey
                 * @example True
                 */
                omitCrowdForecast?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Information about the journey */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RepresentationResponseJourney"];
                };
            };
            /** @description Bad request. One or more parameters are invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
            /** @description Information about this journey could  not be found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
        };
    };
    getTrip: {
        parameters: {
            query: {
                /** @description Reconstruction context to use as basis for finding trip. Can be found in the /api/v3/trips output */
                ctxRecon: string;
                /** @description Format - date-time (as date-time in RFC3339). Datetime to use when reconstructing trip, may be a different date than the trip was originally planned. */
                date?: string;
                /** @description Specify directions or directionsOnly to include directions for walk/bike/car legs in the result. */
                travelRequestType?: "DEFAULT" | "DIRECTIONS" | "DIRECTIONS_ONLY";
                /** @description Give the original reconstruction which was provided by the source (only possible if HARP was used as source). Deprecated, use the sourceCtxRecon field in the Trip response instead. */
                sourceCtxRecon?: boolean;
                /** @description Format - int32. NSR number for the customer making this request. Since the replacement of the NSRA backend in Reisinfo with PAS, we do not use the NSR number anymore */
                nsr?: number;
                /** @description Name of the product that will be used in travel. */
                product?: "GEEN" | "OVCHIPKAART_ENKELE_REIS" | "OVCHIPKAART_RETOUR" | "DAL_VOORDEEL" | "ALTIJD_VOORDEEL" | "DAL_VRIJ" | "WEEKEND_VRIJ" | "ALTIJD_VRIJ" | "BUSINESSCARD" | "BUSINESSCARD_DAL" | "STUDENT_WEEK" | "STUDENT_WEEKEND" | "VDU" | "SAMENREISKORTING" | "TRAJECT_VRIJ";
                /** @description Discount of travel to use when calculating product prices */
                discount?: string;
                /** @description Format - int32. Class of travel to use when calculating product prices */
                travelClass?: number;
            };
            header?: {
                /** @description Account details to use when querying trip assistance options */
                Authorization?: string;
                /** @description Language to use for localizing the travel advice. Only a small subset of text is translated, mainly notes. Defaults to Dutch */
                lang?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A trip that matches the given parameters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Trip"];
                };
            };
            /** @description Bad request. One or more parameters are invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
            /** @description Backend system failed in an unrecoverable way. */
            419: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
        };
    };
    getCalamities: {
        parameters: {
            query?: {
                /** @description Language to use for localizing the calamities */
                lang?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of calamities */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CalamitiesResponse"];
                };
            };
        };
    };
    getPrices: {
        parameters: {
            query?: {
                /**
                 * @description UicCode of the origin station (but station code is also still supported)
                 * @example ut
                 */
                fromStation?: string;
                /**
                 * @description UicCode of the destination station (but station code is also still supported)
                 * @example gn
                 */
                toStation?: string;
                /** @description Travel class to return the price for */
                travelClass?: "FIRST_CLASS" | "SECOND_CLASS";
                /** @description Return the price for a single or return trip. Defaults to single */
                travelType?: "single" | "return";
                /** @description Set to true to return the price including joint journey discount */
                isJointJourney?: boolean;
                /** @description Format - int32. Number of adults to return the price for. Defaults to 1 */
                adults?: number;
                /** @description Format - int32. Number of children to return the price for. Defaults to 0 */
                children?: number;
                /** @description Specific identifier for the route to take between the two stations. This routeId is returned in the /api/v3/trips call. */
                routeId?: string;
                /** @description Format - date-time (as date-time in RFC3339). Planned departure time of the trip. Is used to find the correct route, if multiple routes are possible between the origin and destination station. */
                plannedDepartureTime?: string;
                /** @description Format - date-time (as date-time in RFC3339). Planned arrival time of the trip. Is used to find the correct route, if multiple routes are possible between the origin and destination station. */
                plannedArrivalTime?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Information about the price to pay given the input parameters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RepresentationResponsePricesResponseV3"];
                };
            };
            /** @description Bad request. One or more parameters are invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
            /** @description Stationcode provided in the parameters could not be found or the price is unknown */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
        };
    };
    getStations: {
        parameters: {
            query?: {
                /** @description q */
                q?: string;
                /**
                 * @description countryCodes
                 * @example nl,d,b
                 */
                countryCodes?: string[];
                /** @description Format - int64. The limit is only applied when call is performed with q parameter. If invoked by countrycodes only, no limit is applied */
                limit?: number;
            };
            header?: {
                "x-caller-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of stations that can be used to plan trips */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StationResponse"];
                };
            };
        };
    };
    getTravelAdvice: {
        parameters: {
            query?: {
                /** @description Language to use for localizing the travel advice. Only a small subset of text is translated, mainly notes. Defaults to Dutch */
                lang?: string;
                /** @description NS station code of the origin station */
                fromStation?: string;
                /** @description UIC code of the origin station */
                originUicCode?: string;
                /** @description Latitude of the origin location. Should be used together with originLng. If the origin is a station, just provide the uicCode instead of the lat/lng */
                originLat?: number;
                /** @description Longitude of the origin location. Should be used together with originLat. If the origin is a station, just provide the uicCode instead of the lat/lng */
                originLng?: number;
                /** @description Name of the origin location. Will be returned in the response */
                originName?: string;
                /** @description NS station code of the destination station */
                toStation?: string;
                /** @description UIC code of the destination station */
                destinationUicCode?: string;
                /** @description Latitude of the destination location. Should be used together with destinationLng. If the destination is a station, just provide the uicCode instead of the lat/lng */
                destinationLat?: number;
                /** @description Longitude of the destination location. Should be used together with destinationLat. If the destination is a station, just provide the uicCode instead of the lat/lng */
                destinationLng?: number;
                /** @description Name of the destination location. Will be returned in the response */
                destinationName?: string;
                /** @description NS station code of the via station */
                viaStation?: string;
                /** @description UIC code of the via station */
                viaUicCode?: string;
                /** @description Latitude of the via location. Should be used together with viaLng. Will only be used for door-to-door trips. If the via location is a station, just provide the uicCode instead of the lat/lng. */
                viaLat?: number;
                /** @description Longitude of the via location. Should be used together with viaLat. Will only be used for door-to-door trips. If the via location is a station, just provide the uicCode instead of the lat/lng. */
                viaLng?: number;
                /** @description Return trip advices with walking options to start travel from origin to a train station (first mile) */
                originWalk?: boolean;
                /** @description Return trip advices with biking options to start travel from origin to a train station (first mile) */
                originBike?: boolean;
                /** @description Return trip advices with car options to start travel from origin to a train station (first mile) */
                originCar?: boolean;
                /** @description Return trip advices with walking options to finish travel to the destination (last mile) */
                destinationWalk?: boolean;
                /** @description Return trip advices with biking options to finish travel to the destination (last mile) */
                destinationBike?: boolean;
                /** @description Return trip advices with car options to finish travel to the destination (last mile) */
                destinationCar?: boolean;
                /** @description Format - date-time (as date-time in RFC3339). Datetime that the user want to depart from his origin or or arrive at his destination */
                dateTime?: string;
                /** @description If set, the date and time parameters specify the arrival time for the trip search instead of the departure time */
                searchForArrival?: boolean;
                /** @description Use searchForArrival parameter instead */
                departure?: boolean;
                /** @description Parameter specifying that the user wants a next or previous page of the results */
                context?: string;
                /** @description Changes the CHANGE_NOT_POSSIBLE status to CHANGE_COULD_BE_POSSIBLE if the traveler can walk twice as fast. Deprecated: the functionality is removed because we do not want to suggest travelers to run. */
                shorterChange?: boolean;
                /** @description Format - int32. Extra time in minutes required at all transfers to change trains. */
                addChangeTime?: number;
                /** @description Format - int32. Use addChangeTime instead */
                minimalChangeTime?: number;
                /** @description Format - int32. Waiting time in minutes at the via location, exclusive of transfer time */
                viaWaitTime?: number;
                /** @description Use travelAssistance parameter instead */
                originAccessible?: boolean;
                /** @description Return trip advices from the trip assistance booking engine PAS */
                travelAssistance?: boolean;
                /** @description Format - int32. NSR number for the customer making this request. Since the replacement of the NSRA backend in Reisinfo with PAS, we do not use the NSR number anymore */
                nsr?: number;
                /** @description Format - int32. Use addChangeTime parameter instead */
                travelAssistanceTransferTime?: number;
                /** @description Accessibility equipment to use when searching for trip assistance options (AVG/PAS) */
                accessibilityEquipment1?: string;
                /** @description Accessibility equipment to use when searching for trip assistance options (AVG/PAS) */
                accessibilityEquipment2?: string;
                /** @description Return trip advices that are accessible. (might be bookable too) */
                searchForAccessibleTrip?: boolean;
                /** @description Could be used to filter for REGIONAL_TRAINS. This parameter is replaced by the localTrainsOnly parameter */
                filterTransportMode?: string;
                /** @description Search only for local train options, i.e. sprinter/sneltrein/stoptrein */
                localTrainsOnly?: boolean;
                /** @description Exclude high speed trains from results (including those with a required reservation) */
                excludeHighSpeedTrains?: boolean;
                /** @description Exclude trains for domestic trips that require a reservation (e.g. Eurostar) */
                excludeTrainsWithReservationRequired?: boolean;
                /** @description Name of the product that will be used in travel */
                product?: "GEEN" | "OVCHIPKAART_ENKELE_REIS" | "OVCHIPKAART_RETOUR" | "DAL_VOORDEEL" | "ALTIJD_VOORDEEL" | "DAL_VRIJ" | "WEEKEND_VRIJ" | "ALTIJD_VRIJ" | "BUSINESSCARD" | "BUSINESSCARD_DAL" | "STUDENT_WEEK" | "STUDENT_WEEKEND" | "VDU" | "SAMENREISKORTING" | "TRAJECT_VRIJ";
                /** @description Discount of travel to use when calculating product prices */
                discount?: string;
                /** @description Format - int32. Class of travel to use when calculating product prices */
                travelClass?: number;
                /** @description Show intermediate stops that the journey passes but doesn't stop at (only works for source:HARP not multi-modal trips from negentwee) */
                passing?: boolean;
                /** @description directionsOnly only plans a google directions (walk/bike/car) advice */
                travelRequestType?: "DEFAULT" | "DIRECTIONS" | "DIRECTIONS_ONLY";
                /** @description exclude modalities from trip search */
                disabledTransportModalities?: string[];
                /** @description Shared modality origin filter to use when querying trips */
                firstMileModality?: string;
                /** @description Shared modality destination filter to use when querying trips */
                lastMileModality?: string;
                /** @description Shared modality total trip filter to use when querying trips */
                entireTripModality?: string;
            };
            header?: {
                /** @description Account details to use when querying trip assistance options */
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A traveladvice with zero or more trips */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TravelAdvice"];
                };
            };
            /** @description Bad request. One or more parameters are invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
            /** @description Backend system failed in an unrecoverable way. */
            419: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
        };
    };
    getStationDisruptions_v3: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                stationCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of disruptions relevant for the given station */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseDisruption"][];
                };
            };
            /** @description Bad request. One or more parameters are invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
            /** @description Station not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
            /** @description A list of disruptions relevant for the given station */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseDisruption"][];
                };
            };
        };
    };
    getDisruption_v3: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Disruption type for the disruption to return.
                 * @example disruption
                 */
                type: "CALAMITY" | "DISRUPTION" | "MAINTENANCE";
                /**
                 * @description Unique identifier of the disruption to return. Can be found using the /api/v3/disruptions call
                 * @example 6004123
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested disruption */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseDisruption"];
                };
            };
            /** @description Bad request. One or more parameters are invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
            /** @description Disruption not found or wrong type given */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
            /** @description The requested disruption */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseDisruption"];
                };
            };
        };
    };
    getDisruptions_v3: {
        parameters: {
            query?: {
                /** @description Type of the disruptions to be returned. If not present all types will be returned. */
                type?: ("CALAMITY" | "DISRUPTION" | "MAINTENANCE")[];
                /** @description Flag to filter maintenance to only return active items, i.e. maintenance that is happening right now */
                isActive?: boolean;
            };
            header?: {
                /**
                 * @description Language for the disruptions. Defaults to nl. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language for details. Please note that only the calamities will be translated, as no translation is available for maintenance and disruptions
                 * @example nl-NL, nl;q=0.9, en;q=0.8, *;q=0.5
                 */
                "Accept-Language"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of disruptions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BaseDisruption"][];
                };
            };
            /** @description Bad request. One or more parameters are invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
        };
    };
    getPrices_1: {
        parameters: {
            query?: {
                /**
                 * @description NS station code of the origin station
                 * @example ut
                 */
                fromStation?: string;
                /**
                 * @description NS Station code of the destination station
                 * @example gn
                 */
                toStation?: string;
                /** @description Travel class to return the price for */
                travelClass?: "1" | "2";
                /** @description Return the price for a single or return trip. Defaults to single */
                travelType?: "single" | "return";
                /** @description Set to true to return the price including joint journey discount */
                isJointJourney?: boolean;
                /** @description Format - int32. Number of adults to return the price for. Defaults to 1 */
                adults?: number;
                /** @description Format - int32. Number of children to return the price for. Defaults to 0 */
                children?: number;
                /** @description Specific identifier for the route to take between the two stations. This routeId is returned in the /api/v3/trips call. */
                routeId?: string;
                /** @description Format - date-time (as date-time in RFC3339). Planned departure time of the trip. Is used to find the correct route, if multiple routes are possible between the origin and destination station. */
                plannedFromTime?: string;
                /** @description Format - date-time (as date-time in RFC3339). Planned arrival time of the trip. Is used to find the correct route, if multiple routes are possible between the origin and destination station. */
                plannedArrivalTime?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Information about the price to pay given the input parameters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RepresentationResponsePrice"];
                };
            };
            /** @description Bad request. One or more parameters are invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
            /** @description Stationcode provided in the parameters could not be found or the price is unknown */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
        };
    };
    getNearestStations: {
        parameters: {
            query: {
                /** @description lat */
                lat: number;
                /** @description lng */
                lng: number;
                /** @description Format - int32. limit */
                limit?: number;
            };
            header?: {
                "x-caller-id"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of plannable stations closest to provided coordinates */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["StationResponse"];
                };
            };
        };
    };
    getOpenAPISpecs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The OpenAPI docs */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getTrip_1: {
        parameters: {
            query: {
                /** @description Reconstruction context to use as basis for finding the trip. Can be found in the /api/v3/trips output */
                ctxRecon: string;
                /** @description Format - int32. The booking number. Can be found in the booking endpoints from the Customer API */
                bookingNumber: number;
                /** @description Format - int32. The id which was returned by the travel assistance backend when the travel advice was requested */
                originalTripRequestId: number;
                /** @description Accessibility equipment to use when searching for trip assistance options */
                accessibilityEquipment1?: string;
                /** @description Accessibility equipment to use when searching for trip assistance options */
                accessibilityEquipment2?: string;
            };
            header: {
                /** @description Account details to use when querying trip assistance options */
                Authorization: string;
                /** @description Language to use for localizing the travel advice. Only a small subset of text is translated, mainly notes. Defaults to Dutch */
                lang?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A trip that matches the given parameters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Trip"];
                };
            };
            /** @description Bad request. One or more parameters are invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
            /** @description Unauthorized. When the request is done by an external developer or when the Authorization header is not correct */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
            /** @description Backend system failed in an unrecoverable way. */
            419: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIError"];
                };
            };
        };
    };
}
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
